package at.ac.uibk.sepm.pixplorer.db;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

/**
 * Hibernate entity class for the users table. A user is represented by his google id. The
 * user object stores the found places, the trophies he has achieved and the favourite places
 * as well. 
 * <p> 
 * The score is accessible and the user type determines whether the user is a tourist or not. Every
 * user can be an admin as well and thus has the privileges to add, edit or delete places over the
 * Pixplorer web interface.
 * 
 * @author cbo
 */
@Entity
@Table(name = "users", schema = "public")
public class User implements Serializable {
	/** constant for user type tourist */
	public static final int TYPE_TOURIST = 1;
	
	/** constant for user type local */
	public static final int TYPE_LOCAL = 2;
	
	private int id;
	private String googleId;
	private long score;
	private int type;
	private boolean admin;
	
	private Set<Place> places = new HashSet<Place>();
	private Set<Place> favourites = new HashSet<Place>();
	private Set<Trophy> trophies = new HashSet<Trophy>();
	
	/**
	 * Returns the primary key for this user.
	 * @return primary key
	 */	
    @Id
    @SequenceGenerator(name = "users_id_seq",
            sequenceName = "users_id_seq",
            allocationSize = 1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE,
            generator = "users_id_seq")
    @Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return id;
	}
	
	/**
	 * Sets the primary key for this user. Do not call this method, the primary
	 * key will be generated by Hibernate!
	 * 
	 * @return primary key - primary key to set
	 */    
	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "google_id")
	public String getGoogleId() {
		return googleId;
	}
	
	public void setGoogleId(String googleId) {
		this.googleId = googleId;
	}
	
	@Column(name = "score")
	public long getScore() {
		return score;
	}
	
	public void setScore(long score) {
		this.score = score;
	}
	
	@Column(name = "user_type")
	public int getType() {
		return type;
	}
	
	public void setType(int type) {
		this.type = type;
	}
	
	@Column(name = "admin")
	public boolean isAdmin() {
		return admin;
	}
	
	public void setAdmin(boolean admin) {
		this.admin = admin;
	}
	
    @OneToMany(cascade = CascadeType.REFRESH, fetch = FetchType.EAGER)
    @JoinTable(name = "usertrophymapping", joinColumns = { @JoinColumn(name = "user_id") }, 
              inverseJoinColumns = { @JoinColumn(name = "trophy_id") })
    public Set<Trophy> getTrophies() {
        return trophies;
    }

    public void setTrophies(Set<Trophy> trophies) {
        this.trophies = trophies;
    }
    
    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinTable(name = "history", joinColumns = { 
			@JoinColumn(name = "user_id", nullable = false) }, 
			inverseJoinColumns = { @JoinColumn(name = "place_id", 
					nullable = false) })
    public Set<Place> getFoundPlaces() {
        return places;
    }

    public void setFoundPlaces(Set<Place> places) {
        this.places = places;
    }
    
    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinTable(name = "favourites", joinColumns = { 
			@JoinColumn(name = "user_id", nullable = false) }, 
			inverseJoinColumns = { @JoinColumn(name = "place_id", 
					nullable = false) })
    public Set<Place> getFavourites() {
        return favourites;
    }

    public void setFavourites(Set<Place> favourites) {
        this.favourites = favourites;
    }    
}
